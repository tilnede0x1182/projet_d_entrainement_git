Exercice 1 — Notion : Branches divergentes (merge avec historique différent)

---

# Cours

Lorsqu’on travaille en équipe sur une même branche, il arrive que deux développeurs fassent des commits différents sans synchroniser leurs dépôts. Cela crée des branches divergentes avec des historiques différents. Pour intégrer ces modifications, Git exige un merge ou un rebase qui peut générer des conflits. La bonne pratique est de toujours puller avant de push pour éviter ce cas. La résolution passe par un pull suivi d’une fusion manuelle des conflits, puis un commit final.

---

# Situation

Vous travaillez sur la branche `feature-auth`. Vous avez fait des commits locaux sur le fichier `auth_service.py`. Entre-temps, votre collègue a poussé des commits sur la même branche qui modifient aussi ce fichier. Vous tentez de push, mais Git rejette car vos branches ont divergé.

---

## Question 1

Quelle commande devez-vous utiliser en premier pour récupérer les dernières modifications distantes ?

 A) git push origin feature-auth
 B) git fetch origin feature-auth
 C) git pull origin feature-auth  <- Bonne réponse
 D) git merge origin/feature-auth

---

## Question 2

Après la commande précédente, Git détecte un conflit dans `auth_service.py`. Quelle commande permet d’ouvrir l’éditeur par défaut pour résoudre ce conflit ?

 A) git conflict auth\_service.py
 B) ouvrir manuellement le fichier `auth_service.py`  <- Bonne réponse
 C) git merge auth\_service.py
 D) git resolve auth\_service.py

---

## Question 3

Une fois les conflits dans `auth_service.py` corrigés, quelle commande devez-vous exécuter pour indiquer à Git que le conflit est résolu ?

 A) git commit -m "résolution conflit"
 B) git add auth\_service.py  <- Bonne réponse
 C) git merge --continue
 D) git push

---

## Question 4

Après avoir ajouté le fichier corrigé, que devez-vous faire pour enregistrer la résolution des conflits dans l’historique Git ?

 A) git commit -m "Résolution des conflits sur auth\_service.py"  <- Bonne réponse
 B) git push origin feature-auth
 C) git rebase --continue
 D) git reset

---

## Question 5

Enfin, quelle commande permet de synchroniser vos modifications locales corrigées avec le dépôt distant ?

 A) git push origin feature-auth  <- Bonne réponse
 B) git pull origin feature-auth
 C) git fetch origin feature-auth
 D) git merge origin/feature-auth

---

Exercice 2 — Notion : Branches divergentes (merge avec historique différent)

---

# Cours

Quand deux développeurs modifient la même branche sans synchronisation, leurs historiques divergent. Git bloque le push pour éviter d’écraser les changements distants. La résolution passe par un pull suivi d’une fusion manuelle, en traitant les conflits dans les fichiers concernés. Il est important de bien valider chaque étape : récupérer, résoudre, ajouter, committer, et enfin pousser.

---

# Situation

Vous travaillez sur la branche `feature-api`. Vous avez modifié le fichier `api_routes.js` et fait plusieurs commits locaux. Votre collègue a poussé des modifications sur cette même branche, aussi dans `api_routes.js`. Votre push est refusé.

---

## Question 1

Quelle commande devez-vous lancer en premier pour synchroniser votre branche locale avec la branche distante ?

 A) git push origin feature-api
 B) git pull origin feature-api  <- Bonne réponse
 C) git fetch origin feature-api
 D) git reset --hard origin/feature-api

---

## Question 2

Git vous informe d’un conflit sur `api_routes.js` après le pull. Quelle est la meilleure action pour débuter la résolution ?

 A) Modifier directement `api_routes.js` en supprimant les marqueurs de conflit (`<<<<<<`, `======`, `>>>>>>`)  <- Bonne réponse
 B) Refaire un commit sans modifications
 C) Lancer `git merge --abort`
 D) Supprimer `api_routes.js` et récupérer une nouvelle version

---

## Question 3

Une fois le conflit corrigé dans `api_routes.js`, quelle commande sert à enregistrer ce changement pour le merge ?

 A) git commit -m "corrigé conflit"
 B) git add api\_routes.js  <- Bonne réponse
 C) git push origin feature-api
 D) git merge --continue

---

## Question 4

Quelle commande faut-il utiliser pour finaliser le merge après avoir ajouté le fichier corrigé ?

 A) git commit -m "Résolution des conflits sur api\_routes.js"  <- Bonne réponse
 B) git reset HEAD\~1
 C) git push origin feature-api
 D) git rebase --continue

---

## Question 5

Pour terminer, comment pousser vos modifications fusionnées sur le dépôt distant ?

 A) git pull origin feature-api
 B) git push origin feature-api  <- Bonne réponse
 C) git fetch origin feature-api
 D) git merge origin/feature-api

---

Exercice 3 — Notion : Branches divergentes (merge avec historique différent)

---

# Cours

Lors d’une divergence de branches, il est crucial de bien comprendre les étapes de synchronisation : pull, résolution des conflits, ajout des fichiers, commit et push. Chaque étape permet à Git de suivre précisément les modifications et d’intégrer correctement l’historique de chacun. La patience et la rigueur dans la résolution des conflits évitent la perte de données.

---

# Situation

Vous travaillez sur la branche `feature-ui`. Vous avez modifié le fichier `dashboard.html` et effectué plusieurs commits. Entretemps, votre collègue a poussé des modifications sur la même branche, touchant aussi `dashboard.html`. Votre push est rejeté.

---

## Question 1

Pour commencer la synchronisation avec la branche distante, quelle commande exécutez-vous ?

 A) git push origin feature-ui
 B) git fetch origin feature-ui
 C) git pull origin feature-ui  <- Bonne réponse
 D) git reset --hard origin/feature-ui

---

## Question 2

Le pull provoque un conflit sur `dashboard.html`. Quelle est la prochaine étape ?

 A) Modifier `dashboard.html` pour supprimer les marqueurs de conflits et choisir la bonne version  <- Bonne réponse
 B) Faire un commit immédiatement
 C) Lancer `git merge --abort`
 D) Ignorer le conflit et refaire un push

---

## Question 3

Une fois le conflit résolu dans `dashboard.html`, quelle commande indique à Git que le fichier est prêt ?

 A) git add dashboard.html  <- Bonne réponse
 B) git commit -m "conflit résolu"
 C) git push origin feature-ui
 D) git merge --continue

---

## Question 4

Quelle commande permet de finaliser la résolution du conflit en enregistrant un commit de merge ?

 A) git commit -m "Résolution conflit dashboard.html"  <- Bonne réponse
 B) git reset HEAD\~1
 C) git push origin feature-ui
 D) git rebase --continue

---

## Question 5

Pour terminer, quelle commande permet de mettre à jour le dépôt distant avec les modifications fusionnées ?

 A) git pull origin feature-ui
 B) git push origin feature-ui  <- Bonne réponse
 C) git fetch origin feature-ui
 D) git merge origin/feature-ui

---

Exercice 4 — Notion : Branches divergentes (merge avec historique différent)

---

# Cours

Lorsque les branches locales et distantes divergent, Git bloque le push pour éviter d’écraser les modifications. La résolution passe par un pull, souvent générant des conflits à résoudre manuellement. Il faut alors corriger les fichiers concernés, marquer leur résolution, committer la fusion, puis pousser les modifications. Cette procédure garantit la cohérence de l’historique partagé.

---

# Situation

Vous travaillez sur la branche `feature-payment`. Vous avez modifié `payment_processor.rb` et fait plusieurs commits. Votre collègue a poussé des modifications sur la même branche, également dans `payment_processor.rb`. Votre tentative de push est rejetée.

---

## Question 1

Quelle commande devez-vous exécuter pour récupérer les dernières modifications distantes ?

 A) git fetch origin feature-payment
 B) git push origin feature-payment
 C) git pull origin feature-payment  <- Bonne réponse
 D) git reset --hard origin/feature-payment

---

## Question 2

Après le pull, Git vous signale un conflit dans `payment_processor.rb`. Quelle est la bonne action suivante ?

 A) Modifier `payment_processor.rb` pour résoudre les conflits en supprimant les marqueurs Git  <- Bonne réponse
 B) Exécuter `git merge --abort`
 C) Faire un nouveau commit sans modifier le fichier
 D) Supprimer `payment_processor.rb` localement

---

## Question 3

Après correction du conflit dans `payment_processor.rb`, quelle commande permet d’indiquer à Git que la résolution est terminée ?

 A) git add payment\_processor.rb  <- Bonne réponse
 B) git commit -m "Résolution conflit"
 C) git push origin feature-payment
 D) git merge --continue

---

## Question 4

Quelle commande permet d’enregistrer la résolution des conflits dans l’historique Git ?

 A) git commit -m "Résolution conflit payment\_processor.rb"  <- Bonne réponse
 B) git reset HEAD\~1
 C) git push origin feature-payment
 D) git rebase --continue

---

## Question 5

Quelle commande finalise la synchronisation avec le dépôt distant en envoyant vos modifications ?

 A) git pull origin feature-payment
 B) git push origin feature-payment  <- Bonne réponse
 C) git fetch origin feature-payment
 D) git merge origin/feature-payment
